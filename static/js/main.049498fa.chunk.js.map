{"version":3,"sources":["Math.utils.js","components/colors.js","components/gameComponents.js","components/Game.js","components/Header.js","components/Timer.js","components/App.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","gameComponents","DisplayStars","props","count","map","starId","className","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","areCandidatesWrong","secondsLeft","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","startNewGame","Header","Timer","App","gameId","setGameId","timeLeft","setTimeLeft","useEffect","timerId","setTimeout","clearTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.049498fa.chunk.js","sourcesContent":["const utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nexport default utils;","const colors = {\r\n  available: \"lightgray\",\r\n  used: \"lightgreen\",\r\n  wrong: \"lightcoral\",\r\n  candidate: \"deepskyblue\",\r\n};\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport utils from \"../Math.utils\";\r\nimport colors from \"./colors\";\r\n\r\nfunction gameComponents() {\r\n  function DisplayStars(props) {\r\n    return (\r\n      <>\r\n        {utils.range(1, props.count).map((starId) => (\r\n          <div key={starId} className=\"star\" />\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n\r\n  function PlayNumber(props) {\r\n    return (\r\n      <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n      >\r\n        {props.number}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  function PlayAgain(props) {\r\n    return (\r\n      <div className=\"game-done\">\r\n        <p\r\n          className=\"message\"\r\n          style={{ color: props.gameStatus === \"won\" ? \"green\" : \"red\" }}\r\n        >\r\n          {props.gameStatus === \"won\" ? \"Yayy! Won\" : \"Uh ohh!\"}\r\n        </p>\r\n        <button className=\"message\" onClick={props.onClick}>\r\n          Play Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return { DisplayStars, PlayNumber, PlayAgain };\r\n}\r\n\r\nexport default gameComponents;\r\n","import React, { useState } from \"react\";\r\nimport utils from \"../Math.utils\";\r\nimport gameComponents from \"./gameComponents\";\r\n\r\nfunction Game(props) {\r\n  const { DisplayStars, PlayNumber, PlayAgain } = gameComponents();\r\n\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n  const areCandidatesWrong = utils.sum(candidateNums) > stars;\r\n\r\n  const gameStatus =\r\n    availableNums.length === 0\r\n      ? \"won\"\r\n      : props.secondsLeft === 0\r\n      ? \"lost\"\r\n      : \"active\";\r\n\r\n  function numberStatus(number) {\r\n    if (!availableNums.includes(number)) {\r\n      return \"used\";\r\n    }\r\n    if (candidateNums.includes(number)) {\r\n      return areCandidatesWrong ? \"wrong\" : \"candidate\";\r\n    }\r\n    return \"available\";\r\n  }\r\n\r\n  function onNumberClick(number, currentStatus) {\r\n    if (gameStatus !== \"active\" || currentStatus === \"used\") {\r\n      return;\r\n    }\r\n    const newCandidateNums =\r\n      currentStatus === \"available\"\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter((cn) => cn !== number);\r\n\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"left\">\r\n        {gameStatus === \"active\" ? (\r\n          <DisplayStars count={stars} />\r\n        ) : (\r\n          <PlayAgain gameStatus={gameStatus} onClick={props.startNewGame} />\r\n        )}\r\n      </div>\r\n      <div className=\"right\">\r\n        {utils.range(1, 9).map((number) => (\r\n          <PlayNumber\r\n            key={number}\r\n            number={number}\r\n            status={numberStatus(number)}\r\n            onClick={onNumberClick}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"help\">\r\n      Pick 1 or more numbers that sum to the number of stars\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Timer(props) {\r\n  return <div className=\"timer\">Time Remaining: {props.secondsLeft}</div>;\r\n}\r\n\r\nexport default Timer;\r\n","import React, { useEffect, useState } from \"react\";\n// eslint-disable-next-line no-unused-vars\nimport styles from \"../styles.css\";\nimport Game from \"./Game\";\nimport Header from \"./Header\";\nimport Timer from \"./Timer\";\n\nfunction App() {\n  const [gameId, setGameId] = useState(1);\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timerId = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  return (\n    <div className=\"game\">\n      <Header />\n      <Game\n        key={gameId}\n        secondsLeft={timeLeft}\n        startNewGame={() => {\n          setTimeLeft(10);\n          setGameId(gameId + 1);\n        }}\n      />\n      <Timer secondsLeft={timeLeft} />\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}